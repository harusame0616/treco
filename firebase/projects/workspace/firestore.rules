rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isMyResource(userId){
      return request.auth != null && request.auth.uid ==  userId;
    }

    function isValidSize(data, sizeRule){
      return  ( sizeRule == null || (
      ('eq' in sizeRule && data.size() == sizeRule.eq)
        || ('lt' in sizeRule && 'gt' in sizeRule && data.size() < sizeRule.lt && data.size() > sizeRule.gt)
        || ('lt' in sizeRule && !('gt' in sizeRule) && data.size() < sizeRule.lt)
        || ('gt' in sizeRule && !('lt' in sizeRule) && data.size() > sizeRule.gt)));
    }

    function hasKey(data, keyName, type){
      return (keyName in data
        && ((type == 'timestamp' && data[keyName] is timestamp)
        || (type == 'string' && data[keyName] is string)
        || (type == 'list' && data[keyName] is list)
        || (type == 'int' && data[keyName] is int)
        || (type == 'number' && data[keyName] is number)
      ));
    }

    function hasListKey(data, keyName, size){
      return hasKey(data, keyName, 'list') && isValidSize(data[keyName], size);
    }

    function hasStringKey(data, keyName, size){
      return hasKey(data, keyName, 'string') && isValidSize(data[keyName], size);
    }

    function hasIdKey(data, keyName){
      return hasKey(data, keyName, 'string') && isValidSize(data[keyName], {'eq':36});
    }

    function hasUserIdKey(data){
      return hasKey(data, 'userId', 'string') && isValidSize(data.userId, {'eq':28});
    }

    function isNoChange(key){
      return request.resource.data[key] == resource.data[key];
    }

    // アクティビティ書き込み
    match /users/{userId}/activities/{activityId} {
      function isValidActivitySchema(activity){
        return ( activity.keys().size() == 12
          && hasIdKey(activity, 'activityId')
          && hasIdKey(activity, 'categoryId')
          && hasIdKey(activity, 'trainingEventId')
          && hasUserIdKey(activity)
          && hasKey(activity, 'date', 'timestamp')
          && hasListKey(activity, 'records', {'lt': 30})
          && hasKey(activity, 'maxRM', 'number')
          && hasKey(activity, 'maxLoad', 'number')
          && hasKey(activity, 'maxValue', 'number')
          && hasKey(activity, 'totalLoad', 'number')
          && hasKey(activity, 'totalValue', 'number')
          && hasKey(activity, 'createdAt', 'timestamp')
        );
      }

      function activityWriteCommonRule(){
        return isMyResource(userId) && isValidActivitySchema(request.resource.data);
      }

      // 新規作成
      // - 認証済み && 自身のリソース
      allow create: if activityWriteCommonRule();

      // レコードの更新
      // - 認証済み && 自身のリソース
      // - レコード以外のデータが既存のデータと一致する(スキーマ更新時変更が必要)
      allow update: if activityWriteCommonRule() && isNoChange('categoryId') && isNoChange('trainingEventId') && isNoChange('activityId') && isNoChange('userId') && isNoChange('date') && isNoChange('createdAt');

      allow delete: if isMyResource(userId);

      match /records/{recordId} {
        function isValidRecordSchema(data){
          return ( data.keys().size() == 9
            && hasIdKey(data, 'activityId')
            && hasIdKey(data, 'categoryId')
            && hasIdKey(data, 'trainingEventId')
            && hasUserIdKey(data)
            && hasKey(data, 'date', 'timestamp')
            && hasKey(data, 'index', 'int')
            && hasKey(data, 'load', 'number') && data.load >= 0
            && hasKey(data, 'value', 'number') && data.value >= 0
            && hasStringKey(data, 'note', {'lt':1025})
          );
        }
        allow create: if isMyResource(userId) && isValidRecordSchema(request.resource.data);

        allow delete: if isMyResource(userId);
      }
    }

    match /users/{userId}/categories/{categoryId} {
      function isValidCategorySchema(category){
        return ( category.keys().size() == 5
          && hasIdKey(category, 'categoryId')
          && hasStringKey(category, 'categoryName', {'gt':0, 'lt':21})
          && hasStringKey(category, 'color', null)
          && category.color.matches('(^#[a-f0-9]{6}$)|(^#[a-f0-9]{8})$')
          && hasUserIdKey(category)
          && hasKey(category, 'order', 'int')
        );
      }

      function categoryWriteCommonRule(){
        return isMyResource(userId) && isValidCategorySchema(request.resource.data);
      }

      // 新規作成
      // - 認証済み && 自身のリソース
      allow create: if categoryWriteCommonRule();

      // 更新
      // - 認証済み && 自身のリソース
      allow update: if categoryWriteCommonRule();

      allow delete: if isMyResource(userId);
    }

    match /users/{userId}/trainingEvents/{categoryId} {
      function isValidTrainingEventSchema(trainingEvent){
        return ( trainingEvent.keys().size() == 7
          && hasUserIdKey(trainingEvent)
          && hasIdKey(trainingEvent, 'categoryId')
          && hasIdKey(trainingEvent, 'trainingEventId')
          && hasStringKey(trainingEvent, 'trainingEventName', {'gt': 0, 'lt': 25})
          && hasStringKey(trainingEvent, 'loadUnit', {'gt': 0, 'lt': 8})
          && hasStringKey(trainingEvent, 'valueUnit', {'gt': 0, 'lt': 8})
          && hasKey(trainingEvent, 'order', 'int')
        );
      }

      function trainingEventWriteCommonRule(){
        return isMyResource(userId) && isValidTrainingEventSchema(request.resource.data);
      }

      // 新規作成
      // - 認証済み && 自身のリソース
      allow create: if trainingEventWriteCommonRule();

      // 更新
      // - 認証済み && 自身のリソース
      allow update: if trainingEventWriteCommonRule();

      allow delete: if isMyResource(userId);
    }

    match /users/{userId}/trainingMenus/{trainingMenuId} {
      function isValidTrainingMenuSchema(trainingMenu){
        return ( trainingMenu.keys().size() == 5
          && hasUserIdKey(trainingMenu)
          && hasIdKey(trainingMenu, 'trainingMenuId')
          && hasStringKey(trainingMenu, 'name', {'gt': 0, 'lt': 25})
          && hasStringKey(trainingMenu, 'note', {'lt': 1025})
          && hasKey(trainingMenu, 'trainingEventIds', 'list') && trainingMenu.trainingEventIds.size() < 11 && trainingMenu.trainingEventIds.join('').size() ==  trainingMenu.trainingEventIds.size() * 36
        );
      }

      // 新規作成
      allow create: if isMyResource(userId) && isValidTrainingMenuSchema(request.resource.data);

      // 更新
      // メモと備考の更新
      // トレーニング種別更新
      allow update: if isMyResource(userId) && isValidTrainingMenuSchema(request.resource.data) && ((isNoChange('userId') && isNoChange('trainingMenuId') && isNoChange('trainingEventIds')) || (isNoChange('userId') && isNoChange('trainingMenuId') && isNoChange('name') && isNoChange('note')));
    }

    match /users/{userId}/configs/trainingMenu {
      function isValidConfigTrainingMenuSchema(config){
        return (config.keys().size() == 1 &&
          hasKey(config, 'orders', 'list') && config.orders.join('').size() == config.orders.size() * 36
        );
      }

      // 新規作成
      allow create, update: if isMyResource(userId) && isValidConfigTrainingMenuSchema(request.resource.data);
    }


    // 自分のデータは全て読み込み可能
    match /users/{userId}/{document=**} {
      allow read: if isMyResource(userId);
    }
  }
}